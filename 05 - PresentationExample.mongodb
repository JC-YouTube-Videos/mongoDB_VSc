use('JC-PersonalItems');

// *** Slide 2 ***
// General SELECT
db.quizinterviewdatas.find().sort({ "id": 1 }).toArray()

// *** Slide 3 ***


// *** Slide 4 ***
// arrayFilters - Really usefull for accessing nested data
/*
db.quizinterviewdatas.updateOne(
  {
    id: 3
  },
  {
    $set: {
      'phone.$[label1].number': '01230 456 789'
      // 'email.$[label1].type': 'Work'
    },
  },
  {
    arrayFilters:[{'label1._id': ObjectId("649c2ad488c55df378a47007")}]
    // arrayFilters:[{'label1.emailId': ObjectId("649c2ad488c55df378a47006")}]
  }
)

db.quizinterviewdatas.findOne({id: 3})
*/


// *** Slide 5 ***
// Unwind, Project & sort(I put the sort in to show how you refer the projected name)
// !!!! Once you unwind you cannot 'wind' it back together
/*
db.quizinterviewdatas.aggregate([
  { $match: {_id: ObjectId("649c282e9e00f5dc20d835e0") }},
  { $unwind: '$phone' },
  { $project: { 
    _id: 0,
    name: 1,
    phoneType: '$phone.type',
    phoneNumber: '$phone.number',
  }},
  { $sort: {phoneType: 1} }
])
*/

// Creating Data - super easy to add date to the DB
/*
db.quizinterviewtypes.drop()
db.quizinterviewtypes.insertMany([
  {
    typesType: 'personal',
    typesName: 'Type - Personal'
  },
  {
    typesType: 'mobile',
    typesName: 'Type - Mobile'
  },
  {
    typesType: 'work',
    typesName: 'Type - Work'
  }
])

db.quizinterviewtypes.find()
*/


// Lookup (This is link doing a join in SQL) & Group 
/*
db.quizinterviewdatas.aggregate([
  { $unwind: '$phone' },
  { $project: { _id: 0, name:1, phoneType: '$phone.type', phoneNumber: '$phone.number'} },
  // {
  //   $lookup: {
  //     from: 'quizinterviewtypes',
  //     localField: 'phoneType',
  //     foreignField: 'typesType',
  //     as: 'phoneDetails',
  //   },
  // },
  // { $unwind: '$phoneDetails' },
  // { $project: { name:1, phoneNumber: 1, phoneNewType: '$phoneDetails.typesName', phoneTypeId: '$phoneDetails._id'} },
  // { $match: { phoneTypeId: ObjectId("649c3f99c32edb54c5f33691") } },
  // // { $group: { _id: "$phoneNewType", count: { $sum: 1 } } },
  // // { $project: { _id: 0, phoneNewType: '$_id', count: 1} }
])
*/

// *** Slide 6 ***
// Dynamic - This who I can dynamically query the data if you do not know what is always doing to be passed in
/*
// ----------------------------------------------------------- \\
// Dynamic create quert clause
let quiz_id, quizId

const quiz_idPassedIn = ['649c282e9e00f5dc20d835e0', '649c282e9e00f5dc20d835df']
// const quiz_idPassedIn = []

// const quizIdPassedIn = [4, 6]
const quizIdPassedIn = []

// Need the if to convert the string to object as this is how it arrives on the BE
if (quiz_idPassedIn.length > 0) {
  quiz_idPassedIn = quiz_idPassedIn.map((a) => ObjectId(a))
}

if (quiz_idPassedIn.length > 0) { quiz_id = { $in: quiz_idPassedIn } } else { quiz_id = { $ne: null } }
if (quizIdPassedIn.length > 0) { quizId = { $in: quizIdPassedIn } } else { quizId = { $ne: null } }
// ----------------------------------------------------------- \\

db.quizinterviewdatas.aggregate([
  { $match: {_id: quiz_id }},
  { $match: {id: quizId }},
  { $project: { 
    _id: 1,
    id: 1,
    name: 1,
    username: 1,
  }},
  { $sort: {id: 1} }
])
*/

/*
// toString - Have to convert the object to evaluate it (just an example not ran)
// This is often done when you want to work through a loop of the 'resulting data' before sending to the FE
if (this.req.user.userRoles.filter((ur) => a.userRoles.some((mr) => mr.userRoleId.toString() === ur.userRoleId.toString())).length)
*/